exercise-1.4
//Set up a map of prices for a number of gizmos that you covet. Then produce
//a second map with the same keys and the prices at a 10 percent discount.

val purchase = Map("sneakers ai jordan" -> 2500,"coat" -> 300, "Notbook" -> 3500 )
purchase: scala.collection.immutable.Map[String,Int] = Map(sneakers ai jordan -> 2500, coat -> 300, Notbook -> 3500)

scala> val discount = for ((k,v) <- purchase) yield (k, v*0.10)
discount: scala.collection.immutable.Map[String,Double] = Map(sneakers ai jordan -> 250.0, coat -> 30.0, Notbook -> 350.0)


exercise-2.4
Write a program that reads words from a file. Use a mutable map to count
how often each word appears. To read the words, simply use a java.util.Scanner :
val in = new java.util.Scanner(new java.io.File("myfile.txt"))
while (in.hasNext()) process in.next()
Or look at Chapter 9 for a Scalaesque way.
At the end, print out all words and their counts.

solution-2
import java.io.File

object exo2 {

  def main(args: Array[String]): Unit = {

    val fileName = ("/home/pierre/mappeter.txt")

    var in = new java.util.Scanner(new File(fileName))

    val mMap = new scala.collection.mutable.HashMap[String, Int]()

    def mProcess(s: String) = {

      val c = mMap.getOrElse(s, 0)
          mMap(s) = c + 1
    }

    while (in.hasNext()) mProcess(in.next())
    mMap
  }

}

exercise-3.4
Repeat the preceding exercise with an immutable map.
solution-3
object exo2 {

  def main(args: Array[String]): Unit = {

    val fileName = ("/home/pierre/mappeter.txt")

    var in = new java.util.Scanner(new File(fileName))

    val maMap =[String, Int]()

    def mProcess(s: String) = {

      val c = mMap.getOrElse(s, 0)
          maMap(s) = c + 1
    }

    while (in.hasNext()) mProcess(in.next())
    maMap
  }

}
exercise-4.4
Repeat the preceding exercise with a sorted map, so that the words are
printed in sorted order.

exercise-5.4
Repeat the preceding exercise with a java.util.TreeMap that you adapt to the
Scala API.

exercise-6.4
Define a linked hash map that maps "Monday" to java.util.Calendar.MONDAY , and
similarly for the other weekdays. Demonstrate that the elements are visited
in insertion order.

solution-6

import collection.mutable.LinkedHashMap

object days {
  def main(args: Array[String]): Unit = {
    val daysOfTheWeek = LinkedHashMap(

      "Monday" -> java.util.Calendar.MONDAY,
      "Tuesday" -> java.util.Calendar.TUESDAY,
      "Wednesday" -> java.util.Calendar.WEDNESDAY,
      "Thursday" -> java.util.Calendar.THURSDAY,
      "Friday" -> java.util.Calendar.FRIDAY,
      "Saturday" -> java.util.Calendar.SATURDAY,
      "Sunday" -> java.util.Calendar.SUNDAY)

    println(daysOfTheWeek)


  }
}
// Map(Monday -> 2, Tuesday -> 3, Wednesday -> 4, Thursday -> 5, Friday -> 6, Saturday -> 7, Sunday -> 1)

exercise-7.4
Print a table of all Java properties reported by the getProperties method of the
java.lang.System class, like this:
java.runtime.name
sun.boot.library.path
java.vm.version
java.vm.vendor
java.vendor.url
path.separator
java.vm.name
|
|
|
|
|
|
|
Java(TM) SE Runtime Environment
/home/apps/jdk1.6.0_21/jre/lib/i386
17.0-b16
Sun Microsystems Inc.
http://java.sun.com/
:
Java HotSpot(TM) Server VM
You need to find the length of the longest key before you can print the table.

solution

import scala.collection.JavaConverters._

object exo8_4 {

  def main(args: Array[String]): Unit = {
    val propert = System.getProperties().asScala
    val longestKey = propert.keysIterator.reduceLeft((x,y) => if (x.length > y.length) x else y)
    for ((k,v) <- propert) {
      print(k + (" " * (longestKey.length - k.length)) + "| " + v + '\n')
    }
    //print(f"%-" + longestKey + "$k | $v%n")
  }

}
\\ sun.desktop                  | gnome
awt.toolkit                  | sun.awt.X11.XToolkit
java.specification.version   | 11
sun.cpu.isalist              | 
sun.jnu.encoding             | UTF-8
java.class.path              | /home/pierre/IdeaProjects/udemyScala/out/production/udemyScala:/home/pierre/.sdkman/candidates/scala/current/lib/scala-library.jar:/home/pierre/.sdkman/candidates/scala/current/lib/scala-swing_2.12-2.0.3.jar:/home/pierre/.sdkman/candidates/scala/current/lib/scala-parser-combinators_2.12-1.0.7.jar:/home/pierre/.sdkman/candidates/scala/current/lib/scala-reflect.jar:/home/pierre/.sdkman/candidates/scala/current/lib/scala-xml_2.12-1.0.6.jar
java.vm.vendor               | Oracle Corporation
sun.arch.data.model          | 64
java.vendor.url              | http://java.oracle.com/
user.timezone                | 
os.name                      | Linux
java.vm.specification.version| 11
sun.java.launcher            | SUN_STANDARD
user.country                 | BR
sun.boot.library.path        | /usr/lib/jvm/java-11-openjdk-amd64/lib
sun.java.command             | exo8_4
jdk.debug                    | release
sun.cpu.endian               | little
user.home                    | /home/pierre
user.language                | pt
java.specification.vendor    | Oracle Corporation
java.version.date            | 2019-04-16
java.home                    | /usr/lib/jvm/java-11-openjdk-amd64
file.separator               | /
java.vm.compressedOopsMode   | Zero based
line.separator               | 

java.specification.name      | Java Platform API Specification
java.vm.specification.vendor | Oracle Corporation
java.awt.graphicsenv         | sun.awt.X11GraphicsEnvironment
sun.management.compiler      | HotSpot 64-Bit Tiered Compilers
java.runtime.version         | 11.0.3+7-Ubuntu-1ubuntu218.04.1
user.name                    | pierre
path.separator               | :
os.version                   | 4.15.0-51-generic
java.runtime.name            | OpenJDK Runtime Environment
file.encoding                | UTF-8
java.vm.name                 | OpenJDK 64-Bit Server VM
java.vendor.url.bug          | http://bugreport.java.com/bugreport/
java.io.tmpdir               | /tmp
java.version                 | 11.0.3
user.dir                     | /home/pierre/IdeaProjects/udemyScala
os.arch                      | amd64
java.vm.specification.name   | Java Virtual Machine Specification
java.awt.printerjob          | sun.print.PSPrinterJob
sun.os.patch.level           | unknown
java.library.path            | /usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib
java.vendor                  | Oracle Corporation
java.vm.info                 | mixed mode, sharing
java.vm.version              | 11.0.3+7-Ubuntu-1ubuntu218.04.1
sun.io.unicode.encoding      | UnicodeLittle
java.class.version           | 55.0

Process finished with exit code 0



exercise-8.4
Write a function minmax(values: Array[Int]) that returns a pair containing the
smallest and the largest values in the array.

solution

scala>  def minmax(a: Array[Int]) = (a.min, a.max)
minmax: (a: Array[Int])(Int, Int)

scala> println(minmax(Array(0,1,2,3,4,5,6,7,8,9)))
(0,9)


exercise-9.4
Write a function lteqgt(values: Array[Int], v: Int) that returns a triple containing
the counts of values less than v , equal to v , and greater than v .

solution

object exo9 {
  def main(args: Array[String]): Unit = {

    def lteqgt(values: Array[Int], v: Int) = {

      (values.count(_ <  v), values.count(_ == v),values.count(_ > v))

    }
      val testArray = Array(3,7,6,8,3,6,-1,3,10,12,2)

       println(lteqgt(testArray,-1))
  }

}



exercise-10.4
What happens when you zip together two strings, such as "Hello".zip("World") ?
Come up with a plausible use case.

solution
scala> "Hello".zip("world")
res7: scala.collection.immutable.IndexedSeq[(Char, Char)] = Vector((H,w), (e,o), (l,r), (l,l), (o,d))