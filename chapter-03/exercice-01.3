//1. Write a code snippet that sets a to an array of n random integers between 0
(inclusive) and n (exclusive).

solution
import util.Random
scala> def randomInRange(n:Int) = for(i <- 0 to n) yield Random.nextInt(n)
randomInRange: (n: Int)scala.collection.immutable.IndexedSeq[Int]
randomInRange(50)
res23: scala.collection.immutable.IndexedSeq[Int] = Vector(45, 17, 7, 5, 4, 48, 4, 2, 42, 30, 42, 31,
 48, 9, 41, 25, 1, 8, 28, 18, 41, 38, 45, 6, 33, 1, 36, 23, 45, 28, 42, 3, 49, 9, 2, 9, 3, 25, 44, 45, 
 38, 7, 44, 18, 37, 48, 2, 36, 44, 49, 31)

 scala> randomInRange(30)
res24: scala.collection.immutable.IndexedSeq[Int] = Vector(6, 27, 7, 15, 20, 22, 19, 18, 10, 7, 18, 6, 
29, 22, 21, 29, 29, 22, 23, 8, 6, 25, 29, 10, 13, 28, 20, 22, 2, 22, 18)




//2.3 Write a loop that swaps adjacent elements of an array of integers. For example,
//Array(1, 2, 3, 4, 5) becomes Array(2, 1, 4, 3, 5) .

solution-2.3 

scala> val a = Array(1,2,3,4,5)
a: Array[Int] = Array(1, 2, 3, 4, 5)
scala> a.grouped(2).toArray
res5: Array[Array[Int]] = Array(Array(1, 2), Array(3, 4), Array(5, 6))
scala> agrupado.map(_.reverse)
res15: Array[Array[Int]] = Array(Array(2, 1), Array(4, 3), Array(6, 5))
//agrupado.flatMap para agrupado os arrays
scala> agrupado.flatMap(inner => inner.reverse)
res17: Array[Int] = Array(2, 1, 4, 3, 6, 5)


//3.3 Repeat the preceding assignment, but produce a new array with the swapped
//values. Use for / yield .

solution-3.3
(for { b <- a.grouped(2); 
 c <-reverse} yield c).toArray
 
 res21: Array[Int] = Array(2, 1, 4, 3, 6, 5)

//4.3 Given an array of integers, produce a new array that contains all positive
//values of the original array, in their original order, followed by all values that
//are zero or negative, in their original order.
 
 
 solution 4.3

scala> val ordena_elem = Array(-12,6,0,4,7,-1,-9,-3)
ordena_elem: Array[Int] = Array(-12, 6, 0, 4, 7, -1, -9, -3)
scala> val(post,neg) = ordena_elem partition(_ > 0)
post: Array[Int] = Array(6, 4, 7)
neg: Array[Int] = Array(-12, 0, -1, -9, -3)
scala> post++neg
res0: Array[Int] = Array(6, 4, 7, -12, 0, -1, -9, -3)

//5.3. How do you compute the average of an Array[Double] ?

scala> val mediaArray = Array(12.5,15.0,11.9)
mediaArray: Array[Double] = Array(12.5, 15.0, 11.9)

scala> mediaArray.sum
res3: Double = 39.4

scala> mediaArray.sum/mediaArray.length
res4: Double = 13.133333333333333

//6.3 How do you rearrange the elements of an Array[Int] so that they appear in
//reverse sorted order? How do you do the same with an ArrayBuffer[Int] ?


solution 6.3
scala> val ordena = Array(60,50,30,40,20,10,5)
ordena: Array[Int] = Array(60, 50, 30, 40, 20, 10, 5)

scala> val decres = ordena.sortWith(_>_)
decres: Array[Int] = Array(60, 50, 40, 30, 20, 10, 5)

scala> ordena.sorted
res0: Array[Int] = Array(5, 10, 20, 30, 40, 50, 60)

scala> import scala.collection.mutable.ArrayBuffer
import scala.collection.mutable.ArrayBuffer

scala> arrayBufferInt sortWith(_>_)
res2: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(60, 50, 40, 30, 20, 10, 5)

//7.3 Write a code snippet that produces all values from an array with duplicates
//removed. (Hint: Look at Scaladoc.)

solution 7.3

scala> val arrayDuplicatas = Array(1,1,1,4,8,4,7,9,4,4,2,4,3,10)
arrayDuplicatas: Array[Int] = Array(1, 1, 1, 4, 8, 4, 7, 9, 4, 4, 2, 4, 3, 10)

scala> arrayDuplicatas.distinct
res0: Array[Int] = Array(1, 4, 8, 7, 9, 2, 3, 10)


//8.3  8. Suppose you are given an array buffer of integers and want to remove all but
//the first negative number. Here is a sequential solution that sets a flag
//when the first negative number is called, then removes all elements beyond.

solution 8.3

scala> import scala.collection.mutable.ArrayBuffer
import scala.collection.mutable.ArrayBuffer

scala> val arrayRemove_elem = ArrayBuffer[Int](2,3,-4,-1,9,-10)
arrayRemove_elem: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(2, 3, -4, -1, 9, -10)

scala> var index = (for(i <- 0 until arrayRemove_elem.length if arrayRemove_elem (i) < 0) yield i)
index: scala.collection.immutable.IndexedSeq[Int] = Vector(2, 3, 5)
scala> index = index.drop(1)
index: scala.collection.immutable.IndexedSeq[Int] = Vector(3, 5)
scala> for(j <- index.reverse)arrayRemove_elem.remove(j)

scala> arrayRemove_elem


//9.3 9. Improve the solution of the preceding exercise by collecting the positions
//that should be moved and their target positions. Make those moves and
//truncate the buffer. Donâ€™t copy any elements before the first unwanted
//element.





