/ Exercice-01 Improve the Counter class in Section 5.1, “Simple Classes and Parameterless Methods,” on page
// 55 so that it doesn’t turn negative at Int.MaxValue.

solution
object exercice01 {

  private var value : Long = 0

  def increment(): Unit ={
    value += 1
  }

  def current: Long = value
}

//exercice-5.2 

//Write a class BankAccount with methods deposit and withdraw, and a read-only property balance.

solution

object exercice02 {

  class  BankAccount(private var aBalance: Double){

    def deposit(amount: Double): Unit ={
      aBalance += amount

    }
    def withdraw(amount: Double) : Unit ={
      if (aBalance - amount >= 0){
        aBalance -= amount

      }

    }
    def balance = aBalance

  }

}

/* exercice-5.3

Write a class Time with read-only properties hours and minutes and a method before(other: Time): Boolean that checks
whether this time comes before the other. A Time object should be constructed as new Time(hrs, min), where hrs is in 
military time format (between 0 and 23). */

solution

object exercice03 {

  class Time(val hours: Int, val minutes: Int) {
    def before(other: Time): Boolean = {
      if (hours == other.hours) minutes <= other.minutes
      else hours <= other.hours
    }
  }

}

/*
exercice-5.4 
Reimplement the Time class from the preceding exercise so that the internal representation is the number of minutes since 
midnight (between 0 and 24 × 60 – 1). Do not change the public interface. That is, client code should be unaffected by your change.
 */

 solution
object exercice04 {
  class Time  {
    private  var time = 0
    def  this(hours: Int, minutes: Int){
      this()
      this.time = hours * 60 + minutes
    }

    private def hours: Int = time/60
    private def minutes: Int = time - hours * 60

    def before(other: Time): Boolean = {
      if (hours == other.hours) minutes <= other.minutes

      else hours <= other.hours
    }

    override def toString: String = f"$hours:$minutes"
  }

}
exercice-5.5
Make a class Student with read-write JavaBeans properties name (of type String) and id (of type Long). What methods are generated? 
(Use javap to check.) Can you call the JavaBeans getters and setters in Scala? Should you?


exercice-5.6
6. In the Person class of Section 5.1, “Simple Classes and Parameterless Methods,”
on page 55, provide a primary constructor that turns negative ages to 0.

solution
object exercices06 {
  
  class Person(private val initialAge: Int) {
    var age: Int = if (initialAge >= 0) initialAge else 0
  }

}

/*
exercice-5.7
Write a class Person with a primary constructor that accepts a string containing
a first name, a space, and a last name, such as new Person("Fred Smith") . Supply
read-only properties firstName and lastName . Should the primary constructor
parameter be a var , a val , or a plain parameter? Why?


 -Answer: Use a private val as we don't want the parameter to be visible outside the class nor
  modifiable.
*/

solution

object exercice07 {

  class Person1(private  val formattedName: String){
    def firstName: String = formattedName.split("").head
    def lastName: String = formattedName.split("").last
  }

}

/*
exercice-5.8
Make a class Car with read-only properties for manufacturer, model name,
and model year, and a read-write property for the license plate. Supply four
constructors. All require the manufacturer and model name. Optionally,
model year and license plate can also be specified in the constructor. If not,
the model year is set to -1 and the license plate to the empty string. Which
constructor are you choosing as the primary constructor? Why?
*/

soution
object exercice08 {

  class Car(private  val manufacturer: String, val model: String, val year :Int = -1, var license: String ){
    def this(manufacturer: String, model: String, license: String,year: Int){
      this(manufacturer,model,year,"")
    }

      def this(manufacturer: String,model: String,licence:String){
      this(manufacturer,model,licence,year)
    }
      def this(manufacturer: String,model:String){
      this(manufacturer,model,-1,"")
    }

  }

}

/*
9. Reimplement the class of the preceding exercise in Java, C#, or C++ (your
choice). How much shorter is the Scala class?

*/
solution 5.9

public class Car {
    // public static void main(String[] args){

    private String manufacturer;
    private String model;
    private int ano = -1;
    private String licensePlate = "";

    // construtor da class car

    public Car(String manufacturer, String model, int ano, String licensePlate) {

        this.manufacturer = manufacturer;
        this.model = model;
        this.ano = ano;
        this.licensePlate = licensePlate;
    }

    public Car (String manufacturer,String model,int ano ){
        this.manufacturer = manufacturer;
        this.model = model;
        this.ano = ano;

    }

    public Car (String manufacturer, String model, String licensePlate){
        this.manufacturer = manufacturer;
        this.model = model;
        this.licensePlate = licensePlate;

    }

    public Car(String manufacturer,String model){
        this.manufacturer = manufacturer;
        this.model = model;

    }

    public String getLicensePlate() {
        return licensePlate;
    }

    public void setLicensePlate(String licensePlate){
        this.licensePlate = licensePlate;
    }
    public String getManufacturer(){
        return  manufacturer;
    }

    public String getModel() {
        return model;
    }

    public int getAno(){
        return ano;
    }
    @Override
    public String toString(){
        return "[" + manufacturer + ", " + model + ", " + ano + ", '" + licensePlate + "']";
    }

}




/*
10. Consider the class
class Employee(val name: String, var salary: Double) {
def this() { this("John Q. Public", 0.0) }
}
Rewrite it to use explicit fields and a default primary constructor. Which form
do you prefer? Why?
*/

solution 5.10